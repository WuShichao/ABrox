[ABrox Project File]
{
    "Analysis": {
        "data": {
            "datafile": null,
            "delimiter": null
        },
        "models": [
            {
                "name": "PDG",
                "priors": [
                    {
                        "C_priv": "stats.beta(a=3.0, b=3.0, loc=0.0)"
                    },
                    {
                        "C_pub": "stats.beta(a=3.0, b=3.0, loc=0.0)"
                    },
                    {
                        "A_priv_wh_m": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_pub_wh_m": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_priv_wh_f": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_pub_wh_f": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_priv_bl_m": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_pub_bl_m": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_priv_bl_f": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_pub_bl_f": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "G": "stats.beta(a=10.0, b=10.0, loc=0.0)"
                    }
                ],
                "simulate": "def simulate(params):\n    C_priv = params['C_priv']\n    C_pub = params['C_pub']\n\n    A_priv_wh_m = params['A_priv_wh_m']\n    A_pub_wh_m = params['A_pub_wh_m']\n\n    A_priv_wh_f = params['A_priv_wh_f']\n    A_pub_wh_f = params['A_pub_wh_f']\n\n    A_priv_bl_m = params['A_priv_bl_m']\n    A_pub_bl_m = params['A_pub_bl_m']\n\n    A_priv_bl_f = params['A_priv_bl_f']\n    A_pub_bl_f = params['A_pub_bl_f']\n\n    G = params['G']\n\n    # PRIVATE condition\n\n    probs = {\"private\":\n                 {\"WT\" : {\"m\" : None, \"f\": None},\n                  \"WG\":  {\"m\": None, \"f\": None},\n                  \"BT\":  {\"m\": None, \"f\": None},\n                  \"BG\":  {\"m\": None, \"f\": None}},\n             \"public\":\n                 {\"WT\": {\"m\": None, \"f\": None},\n                  \"WG\": {\"m\": None, \"f\": None},\n                  \"BT\": {\"m\": None, \"f\": None},\n                  \"BG\": {\"m\": None, \"f\": None}}\n             }\n\n    # probability to say tool after white prime\n    probs['private']['WT']['m'] = C_priv + (1-C_priv) * A_priv_wh_m + (1-C_priv)*(1-A_priv_wh_m)*G\n    probs['private']['WT']['f'] = C_priv + (1-C_priv) * A_priv_wh_f + (1-C_priv)*(1-A_priv_wh_f)*G\n\n    # probability to say gun after white prime\n    probs['private']['WG']['m'] = C_priv + (1-C_priv)*(1-A_priv_wh_m)*(1-G)\n    probs['private']['WG']['f'] = C_priv + (1 - C_priv) * (1 - A_priv_wh_f) * (1 - G)\n\n    # probability to say tool after black prime\n    probs['private']['BT']['m'] = C_priv + (1-C_priv)*(1-A_priv_bl_m)*G\n    probs['private']['BT']['f'] = C_priv + (1 - C_priv) * (1 - A_priv_bl_f) * G\n\n    # probability to say gun after black prime\n    probs['private']['BG']['m'] = C_priv + (1-C_priv)*A_priv_bl_m + (1-C_priv)*(1-A_priv_bl_m)*(1-G)\n    probs['private']['BG']['f'] = C_priv + (1 - C_priv) * A_priv_bl_f + (1 - C_priv) * (1 - A_priv_bl_f) * (1 - G)\n\n    # PUBLIC condition\n\n    # probability to say tool after white prime\n    probs['public']['WT']['m'] = C_pub + (1-C_pub) * A_pub_wh_m + (1-C_pub)*(1-A_pub_wh_m)*G\n    probs['public']['WT']['f'] = C_pub + (1-C_pub) * A_pub_wh_f + (1-C_pub)*(1-A_pub_wh_f)*G\n\n    # probabilit to say gun after white prime\n    probs['public']['WG']['m'] = C_pub + (1 - C_pub) * (1 - A_pub_wh_m) * (1 - G)\n    probs['public']['WG']['f'] = C_pub + (1 - C_pub) * (1 - A_pub_wh_f) * (1 - G)\n\n    # probability to say tool after black prime\n    probs['public']['BT']['m'] = C_pub + (1 - C_pub) * (1 - A_pub_bl_m) * G\n    probs['public']['BT']['f'] = C_pub + (1 - C_pub) * (1 - A_pub_bl_f) * G\n\n    # probability to say gun after black prime\n    probs['public']['BG']['m'] = C_pub + (1 - C_pub) * A_pub_bl_m + (1 - C_pub) * (1 - A_pub_bl_m) * (1 - G)\n    probs['public']['BG']['f'] = C_pub + (1 - C_pub) * A_pub_bl_f + (1 - C_pub) * (1 - A_pub_bl_f) * (1 - G)\n\n\n    N_pub = 65\n    N_priv = 62\n    trials = 384 // 8\n\n    results = {\"private\":\n                   {\"WT\": {'m': 0, 'f': 0},\n                    \"WG\": {'m': 0, 'f': 0},\n                    \"BT\": {'m': 0, 'f': 0},\n                    \"BG\": {'m': 0, 'f': 0}},\n               \"public\":\n                   {\"WT\": {'m': 0, 'f': 0},\n                    \"WG\": {'m': 0, 'f': 0},\n                    \"BT\": {'m': 0, 'f': 0},\n                    \"BG\": {'m': 0, 'f': 0}}\n               }\n\n    contexts = ['private', 'public']\n    combination = ['WT','WG','BT','BG']\n    gender = ['m','f']\n    sample_size = [N_priv, N_pub]\n\n    # simulate_PDG\n\n    for context in np.repeat(contexts, [N_priv, N_pub]):\n\n        for comb in combination:\n            for sex in gender:\n                results[context][comb][sex] += np.sum(np.random.uniform(0, 1, trials) < probs[context][comb][sex])\n\n    # divide by N\n\n    for i, context in enumerate(contexts):\n        for comb in combination:\n            for sex in gender:\n                results[context][comb][sex] /= sample_size[i]\n\n    out = np.empty(shape=(8, 2))\n    \n    for i, context in enumerate(contexts):\n        for j, sex in enumerate(gender):\n            for k, comb in enumerate(combination):\n                out[k + (j*4), i] = results[context][comb][sex]\n\n    return out"
            },
            {
                "name": "SG",
                "priors": [
                    {
                        "C_priv": "stats.beta(a=3.0, b=3.0, loc=0.0)"
                    },
                    {
                        "C_pub": "stats.beta(a=3.0, b=3.0, loc=0.0)"
                    },
                    {
                        "A_priv_wh_m": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_pub_wh_m": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_priv_wh_f": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_pub_wh_f": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_priv_bl_m": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_pub_bl_m": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_priv_bl_f": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "A_pub_bl_f": "stats.beta(a=2.0, b=10.0, loc=0.0)"
                    },
                    {
                        "G": "stats.beta(a=10.0, b=10.0, loc=0.0)"
                    }
                ],
                "simulate": "def simulate(params):\n    C_priv = params['C_priv']\n    C_pub = params['C_pub']\n\n    A_priv_wh_m = params['A_priv_wh_m']\n    A_pub_wh_m = params['A_pub_wh_m']\n\n    A_priv_wh_f = params['A_priv_wh_f']\n    A_pub_wh_f = params['A_pub_wh_f']\n\n    A_priv_bl_m = params['A_priv_bl_m']\n    A_pub_bl_m = params['A_pub_bl_m']\n\n    A_priv_bl_f = params['A_priv_bl_f']\n    A_pub_bl_f = params['A_pub_bl_f']\n\n    G = params['G']\n\n    # PRIVATE condition\n\n    probs = {\"private\":\n                 {\"WT\": {\"m\": None, \"f\": None},\n                  \"WG\": {\"m\": None, \"f\": None},\n                  \"BT\": {\"m\": None, \"f\": None},\n                  \"BG\": {\"m\": None, \"f\": None}},\n             \"public\":\n                 {\"WT\": {\"m\": None, \"f\": None},\n                  \"WG\": {\"m\": None, \"f\": None},\n                  \"BT\": {\"m\": None, \"f\": None},\n                  \"BG\": {\"m\": None, \"f\": None}}\n             }\n\n    # probability to say tool after white prime\n    probs['private']['WT']['m'] = A_priv_wh_m + (1 - A_priv_wh_m) * C_priv + (1-A_priv_wh_m)*(1-C_priv)*G\n    probs['private']['WT']['f'] = A_priv_wh_f + (1 - A_priv_wh_f) * C_priv + (1-A_priv_wh_f)*(1-C_priv)*G\n\n    # probability to say gun after white prime\n    probs['private']['WG']['m'] = (1-A_priv_wh_m) * C_priv + (1-A_priv_wh_m)*(1-C_priv)*(1-G)\n    probs['private']['WG']['f'] = (1-A_priv_wh_f) * C_priv + (1-A_priv_wh_f)*(1-C_priv)*(1-G)\n\n    # probability to say tool after black prime\n    probs['private']['BT']['m'] = (1-A_priv_bl_m) * C_priv + (1-A_priv_bl_m)*(1-C_priv)*G\n    probs['private']['BT']['f'] = (1-A_priv_bl_f) * C_priv + (1-A_priv_bl_f)*(1-C_priv)*G\n\n    # probability to say gun after black prime\n    probs['private']['BG']['m'] = A_priv_bl_m + (1-A_priv_bl_m)*C_priv + (1-A_priv_bl_m)*(1-C_priv)*(1-G)\n    probs['private']['BG']['f'] = A_priv_bl_f + (1-A_priv_bl_f)*C_priv + (1-A_priv_bl_f)*(1-C_priv)*(1-G)\n\n    # PUBLIC condition\n\n    # probability to say tool after white prime\n    probs['public']['WT']['m'] = A_pub_wh_m + (1 - A_pub_wh_m) * C_pub + (1 - A_pub_wh_m) * (1 - C_pub) * G\n    probs['public']['WT']['f'] = A_pub_wh_f + (1 - A_pub_wh_f) * C_pub + (1 - A_pub_wh_f) * (1 - C_pub) * G\n\n    # probability to say gun after white prime\n    probs['public']['WG']['m'] = (1 - A_pub_wh_m) * C_pub + (1-A_pub_wh_m)*(1-C_pub) * (1 - G)\n    probs['public']['WG']['f'] = (1 - A_pub_wh_f) * C_pub + (1-A_pub_wh_f)*(1-C_pub) * (1 - G)\n\n    # probability to say tool after black prime\n    probs['public']['BT']['m'] = (1 - A_pub_bl_m) * C_pub + (1 - A_pub_bl_m) * (1 - C_pub) * G\n    probs['public']['BT']['f'] = (1 - A_pub_bl_f) * C_pub + (1 - A_pub_bl_f) * (1 - C_pub) * G\n\n    # probability to say gun after black prime\n    probs['public']['BG']['m'] = A_pub_bl_m + (1 - A_pub_bl_m) * C_pub + (1 - A_pub_bl_m) * (1 - C_pub) * (1 - G)\n    probs['public']['BG']['f'] = A_pub_bl_f + (1 - A_pub_bl_f) * C_pub + (1 - A_pub_bl_f) * (1 - C_pub) * (1 - G)\n\n\n\n    N_pub = 65\n    N_priv = 62\n    trials = 384 // 8\n\n    results = {\"private\":\n                   {\"WT\": {'m' : 0, 'f' : 0 },\n                    \"WG\": {'m' : 0, 'f' : 0 },\n                    \"BT\": {'m' : 0, 'f' : 0 },\n                    \"BG\": {'m' : 0, 'f' : 0 }},\n               \"public\":\n                   {\"WT\": {'m': 0, 'f': 0},\n                    \"WG\": {'m': 0, 'f': 0},\n                    \"BT\": {'m': 0, 'f': 0},\n                    \"BG\": {'m': 0, 'f': 0}}\n               }\n\n    contexts = ['private', 'public']\n    combination = ['WT','WG','BT','BG']\n    gender = ['m','f']\n    sample_size = [N_priv, N_pub]\n\n    # simulate_SG\n\n    for context in np.repeat(contexts, [N_priv, N_pub]):\n\n        for comb in combination:\n            for sex in gender:\n                results[context][comb][sex] += np.sum(np.random.uniform(0, 1, trials) < probs[context][comb][sex])\n\n    # divide by N\n\n    for i, context in enumerate(contexts):\n        for comb in combination:\n            for sex in gender:\n                results[context][comb][sex] /= sample_size[i]\n\n    out = np.empty(shape=(8, 2))\n    \n    for i, context in enumerate(contexts):\n        for j, sex in enumerate(gender):\n            for k, comb in enumerate(combination):\n                out[k + (j*4), i] = results[context][comb][sex]\n\n    return out"
            }
        ],
        "summary": "def summary(data):\n    return data.flatten()",
        "distance": "def distance(simSummary, obsSummary):\n    # write your code here\n    pass",
        "settings": {
            "percentile": 0.01,
            "objective": "comparison",
            "outputdir": "/Users/ulf.mertens/Seafile/Uni/approxbayes/abrox/project_files/mptree/analysis",
            "modeltest": 1,
            "threshold": -1,
            "distance_metric": "default",
            "simulations": 10000.0,
            "fixedparameters": {
                "C_priv": 0.5,
                "C_pub": 0.5,
                "A_priv_wh_m": 0.12,
                "A_pub_wh_m": 0.2,
                "A_priv_wh_f": 0.23,
                "A_pub_wh_f": 0.15,
                "A_priv_bl_m": 0.19,
                "A_pub_bl_m": 0.27,
                "A_priv_bl_f": 0.28,
                "A_pub_bl_f": 0.35,
                "G": 0.5
            },
            "method": "rejection"
        }
    }
}